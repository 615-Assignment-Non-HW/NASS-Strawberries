---
title: "Stawberries"
author: MA615
date: 2023 Sept 25
format: html
engine: knitr
---

# Preparing data for analysis

## Introduction: foundations

Before we begin to work with the strawberry data, let's talk about how we will approach the work.

### Data cleaning and organization

Cleaning and organizing data for analysis is an essential skill for data scientists.
Serious data analyses must be presented with the data on which the results depend. The credibility of data analysis and modelling depends on the care taken in data preparation and organization.

#### References

In their handbook ["An introduction to data cleaning with R" by Edwin de Jonge and Mark van der Loo](https://cran.r-project.org/doc/contrib/de_Jonge+van_der_Loo-Introduction_to_data_cleaning_with_R.pdf), de Jonge and van der Loo go into detail about specific data cleaning isssues and how to handle them in R.

["Problems, Methods, and Challenges in Comprehensive Data Cleansing" by Heiko MÃ¼ller and Johann-Christoph Freytag](https://www.researchgate.net/profile/Heiko-Mueller/publication/228929938_Problems_methods_and_challenges_in_comprehensive_data_cleansing/links/09e415101b58541e2c000000/Problems-methods-and-challenges-in-comprehensive-data-cleansing.pdf) is a good companion to the de Jonge and van der Loo handbook, offering additional issues in their discussion.

### Attitudes

Mechanistic descriptions of data cleaning methods are insufficient

#### Data is the product (or by-product) of purposeful human activity

Much of the data used in analysis accessed on local databases or online which may create the impression that the data have been carefully curated. Beware. Data are produced by people for a purpose, with a point-of-view, and at a time and location that may affect the data. The provenance and lineage of the data are meta data you should include when reporting analysis. Data collection is purposeful human activity with all of the risks and weaknesses that are part of any purposeful human activity.

#### Data is language

Data has meaning. Data can be included in sentences related to the meaning of the data. Cleaning and organizing data should be informed by the meaning the data convey and how that meaning relates to the research you are doing do achieve this important result

-   Immerse yourself in the data. Put data into context.

-   Visualize the data to find problems, confirm your understandings, and plan your data organization. People do a bad job of seeing meaningful patterns in data but a good job of seeing patterns of all kinds when data are rendered as plots. As you product and show visualizations, ask your self and those who view your presentations, "what do you see?" and "what do you wonder?"

## Example: Strawberries

### Public information

[WHO says strawberries may not be so safe for you--2017March16](https://med.news.am/eng/news/13621/who-says-strawberries-may-not-be-so-safe-for-you.html)

[Pesticides + poison gases = cheap, year-round strawberries 2019March20](https://www.ewg.org/foodnews/strawberries.php)

[Multistate Outbreak of Hepatitis A Virus Infections Linked to Fresh Organic Strawberries-2022March5](https://www.cdc.gov/hepatitis/outbreaks/2022/hav-contaminated-food/index.htm)

[Strawberry makes list of cancer-fighting foods-2023May31](https://issuu.com/mechlocal/docs/053123_mech_asf/s/25386339)

## What is the question?

-   Where they are grown? By whom?

-   Are they really loaded with carcinogenic poisons?

-   Are they really good for your health?

-   Are organic strawberries carriers of deadly diseases?

-   When I go to the market should I buy conventional or organic strawberries?

## The data

The data set for this assignment has been selected from: [USDA_NASS](https://quickstats.nass.usda.gov) <br> The data have been stored on NASS here: [USDA_NASS_strawb_2023SEP19](https://quickstats.nass.usda.gov/results/45FBC825-B104-38E2-9802-839F5F3C7036)

and has been stored on the backboard as strawberry.csv.

## USDA NASS

```{r}
#| label: Load libraries
#| warning: false
#| message: false
#| echo: false

library(knitr)  
library(kableExtra)
library(tidyverse)
library(stringr)
```

## Read the file

```{r warning=FALSE, message=FALSE}
#| label: read data - glimpse 
#| warning: false
#| message: false
#| echo: false

strawberry <- read_csv("strawberry.csv", col_names = TRUE)

# glimpse(strawberry)
```


## Remove columns with a single value in all columns

```{r}
#| label: drop one-item columns
#| echo: false

## define function
drop_one_value_col <- function(df){
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }

if(is.null(drop)){return("none")}else{

   print("Columns dropped:")
   print(colnames(df)[drop])
   strawberry <- df[, -1*drop]
   }
}


## use the function

strawberry <- drop_one_value_col(strawberry)

## applying the function a second time 
## tests the function when there aren't any 
## one-value columns
#####  drop_one_value_col(strawberry)

```

Glimpse of strawberry data after dropping single-value columns.

```{r}
#| label: glimpse of strawberry data
#| echo: false

glimpse(strawberry)

```



## Examine the data. How is it organized?

### Is every line associated with a state?

```{r}
#| label: examine rows
#| echo: false

## is every line associated with a state?

## state_all contains the number of rows containing data 
## for each of the 47 strawberry-growing states.
state_all <- strawberry |> group_by(State) |> count()

## test if every row is associated with a state by summing the 
## counts and testing for equality with the total rows in the 
## data frame

if(sum(state_all$n) == dim(strawberry)[1]){print("Every row has value in the State column.")}

```




### Which state has the most rows?


```{r}
#| label: which state has the most rows
#| echo: false

state_max <- state_all$State[which(state_all$n ==  max(state_all$n)  )]

```



The data is organized by state.  
The state with the most rows is `r paste(state_max)`.

## Examine California data

```{r}
#| label: examine California data
#| echo: false

## filter rows of California data from the CENSUS data
calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))


## ## filter rows of California data from the SURVEY data
calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))

census_col <- colnames(calif_census)

survey_col <- colnames(calif_survey)

```



### List the composite columns 

Census: `r paste(census_col[c(6, 8)])`

Survey: `r paste(survey_col[c(6,7,8)])`


## Separate CENSUS and SURVEY into two Data Frames

In the strawberry data frame, 
The CENSUS rows contains marketing, sales, and productiong data.  The SURVEY rows contain rows which may be redundant with the CENSUS rows and chemical application rows.

After splitting CENSUS and SURVEY rows into two data frames, 
finish organizing the CENSUS data first.  Then, organize the
SURVEY data frame splitting the marketing, and production data from the chemical application data.




```{r}
#| label: split srawberry into census and survey pieces
#| echo: false

strwb_census <- strawberry |> filter(Program == "CENSUS")

strwb_survey <- strawberry |> filter(Program == "SURVEY")

## check that all of the rows are accounted for

nrow(strawberry) == (nrow(strwb_census) + nrow(strwb_survey))

## Move marketing-related rows in strw_b_chem 
## to strw_b_sales

## clean up the environment

rm(calif_census, calif_survey, state_all)

```


# Complete with the census data frame

## Separate composite columns and clean the Value column

Composite columns in the strwb_census: Data Item, Domain category

Column separators in CENSUS: ",", "-", ":"

### Separate `Data Item` into columns by ","


```{r}
#| label: split Data Item
#| echo: false

## This will be done in stages --

####################################################
## split `Data Item` into "Fruit", "temp1","temp2","temp3"
## then test the columns created for numer of distinct values
## split the columns until you have columns of 
## subjects, properties, values, and metrics (where metrics
## are the units defined for the values)

## In this case, the subject is State/Strawberries -- 
## strawberries grown reported by state.

## When using separate_wider_delim() when you don't know the 
## number of columns the function will return,
## use the "too_many" and "too_few" parameters to set up 
## the function.  Generally, setting both parameters
## to "error" will produce helpful error messages.

  strwb_census <- strwb_census |>
  separate_wider_delim(  cols = `Data Item`,
                         delim = ",",
                         names = c("Fruit",
                                 "temp1",
                                 "temp2",
                                 "temp3"),
                         too_many = "error",
                         too_few = "align_start"
                       )

## Test the columns for the number of distinct values.
## for example:
##
## a <- strwb_census |> distinct(Fruit)
## The Fruit column only has one value: STRAWBERRIES the 
## subject under investigation.
##
## Remember - the value in single-value columns
## are often needed for Labels on tables and plots.
##
## Testing the temp1 column guides the next step.
## a <- strwb_census |> distinct(temp1)
## The "temp1" column has 4 distinct values
##
##    " ORGANIC - OPERATIONS WITH SALES"
##    " ORGANIC - PRODUCTION"           
##    " ORGANIC - SALES"                
##    " ORGANIC"  
##
##  (Note the leading space in each string -- 
##       which is fixed below.)
##
##  You can see that this column needs to be split between
##  "organic" and the properties "OPERATIONS WITH SALES", 
##  "PRODUCTION" and "SALES",  
##    using " - " as the column delimiter.
##
##  The column "prop_acct" contains the properties,
##   which are are accounting metrics related to
##   strawberry growing operations.


############################################
## split temp1 into crop_type, Prop_acct

strwb_census <- strwb_census |>
  separate_wider_delim(  cols = temp1,
                         delim = " - ",
                         names = c("crop_type",
                                 "prop_acct"),
                         too_many = "error",
                         too_few = "align_start"
                       )

## Once again, test the columns to plan your next step.
##
# a <- strwb_census |> distinct(crop_type)
## Column "crop_type' has single value  "organic"

# a <- strwb_census |> distinct(prop_acct)

## 
## The stringss in the "prop_acct" column are row labels
## for values reported in the "Values" column.  

##    "OPERATIONS WITH SALES"
##    "PRODUCTION"           
##    "SALES"               
##    "NA"   

## Note that the NA is in a row where the value 
## is labeled in another column.
##

############################################
## trim the strings
## you can see which columns contain string values that need
## to have leading or trailing spaces that need to be trimmed.


# glimpse(strwb_census)

strwb_census$crop_type <- str_trim(strwb_census$crop_type, side = "both")

strwb_census$temp2 <- str_trim(strwb_census$temp2, side = "both")

strwb_census$temp3 <- str_trim(strwb_census$temp3, side = "both")



#############################################
## split temp2 into market_type, measure

##
## The temp2 column requires a different logic.
## 

## start by looking at the unique entries in the temp2 column.

# a <- strwb_census |> distinct(temp2)
# 
# temp2
# 1  NA                                    
# 2 " MEASURED IN CWT"                     
# 3 " MEASURED IN $"                       
# 4 " FRESH MARKET - OPERATIONS WITH SALES"
# 5 " FRESH MARKET - SALES"                
# 6 " PROCESSING - OPERATIONS WITH SALES"  
# 7 " PROCESSING - SALES"   

## temp2 contains data for three separate columns
## 
##   All Strawberries  (is this a Total?)
##   Fresh Market
##   Processing
##
##  To understand these labels see 
##     "Strawberries: An Economic Assessment of the Feasibility
##      of Providing Multiple-Peril Crop Insurance",
##        prepared by Economic Research Service, USDA
##             for the Federal Crop Insurance Corporation
##                  October 31, 1994
## 

```



## Create a "Fresh Market" column

```{r}
#| label: create a fresh market column
#| echo: false
#| eval: true

## make a copy of the temp2 column named `Fresh Market`.
strwb_census <- strwb_census |> mutate(`Fresh Market` = temp2, .after = temp2)

## Remove cells in `Fresh Market` column 
##   that begin "MEASURED"
strwb_census$`Fresh Market` <- strwb_census$`Fresh Market` |> str_replace( "^MEA.*", "")

## Remove cells in `Fresh Market` column 
##   that begin "PROCESSING" 
strwb_census$`Fresh Market` <- strwb_census$`Fresh Market` |> str_replace( "^P.*", "")

## substitute a space for NA in `Fresh Market` column
strwb_census$`Fresh Market`[is.na(strwb_census$`Fresh Market`)] <- ""  

## in temp2 column, remove cells that begin "FRESH"
 strwb_census$temp2 <- strwb_census$temp2 |> str_replace("^F.*", "")

## Now fix the entries in the `Fresh Market` column
##   Remove "FRESH MARKET - " from the cells
strwb_census$`Fresh Market` <- strwb_census$`Fresh Market` |> str_replace("^FRESH MARKET - ", "")


```



## Create a "Process Market" column

```{r}
#| label: make process market column
#| echo: false

## Make a copy of temp2 named `Process Market`
strwb_census <- strwb_census |> mutate(`Process Market` = temp2, .after = temp2)

## remove `Process Market` cells beginning "MEASURED"
strwb_census$`Process Market` <-  strwb_census$`Process Market` |> str_replace("^MEA.*", "")

## substitute space for NA in `Process Market` column
strwb_census$`Process Market`[is.na(strwb_census$`Process Market`)] <- ""

## In temp2, remove cells that begin "PROCESSING"
strwb_census$temp2 <- strwb_census$temp2 |> str_replace("^P.*", "")

## In `Processing Market`, remove "PROCESSING - " from cells
strwb_census$`Process Market` <-  strwb_census$`Process Market` |> str_replace("PROCESSING - ", "") 


```





Remove NA's from prop_acct, temp2, and temp3

```{r}
#| label: remove NAs
#| echo: false

## substitute a space for NA in prop_acct column
strwb_census$prop_acct[is.na(strwb_census$prop_acct)] <- "" 

## substitute a space for NA in temp2 column
strwb_census$temp2[is.na(strwb_census$temp2)] <- "" 

## substitute a space for NA in temp2 column
strwb_census$temp3[is.na(strwb_census$temp3)] <- "" 


```

Combine temp2 with temp3 to create Metric column
remove 
relocate columns

```{r}
#| label: final cleanup
#| echo: false


strwb_census <- strwb_census |> unite(temp2, temp3, col="Metric", sep="")

## Now fix the entries in the Metric column
##   Remove "MEASURED IN " from the cells
strwb_census$Metric <- strwb_census$Metric |> str_replace("MEASURED IN ", "")

## move Metric to the end
strwb_census <- strwb_census |> relocate(Metric, .before = Domain)

strwb_census <- strwb_census |> relocate(`Process Market`, .before = Metric)

strwb_census <- strwb_census |> rename(Totals = prop_acct)

#drop_one_value_col(strwb_census)




```








[NASS help](https://quickstats.nass.usda.gov/tutorials)

[Quick Stats Glossary](https://quickstats.nass.usda.gov/src/glossary.pdf)


[Quick Stats Column Definitions](https://quickstats.nass.usda.gov/param_define)



[](https://www.nass.usda.gov/Statistics_by_Subject/index.php?sector=CROPS)




## The Value column transform

```{r}
#| label: define functions dcomma and footnote finder
#| echo: false
#| eval: true

## remove commas from numbers
## fix footnotes

## basic tools

## start by getting the Values column so you can work on it 

vals <- strwb_census$Value

## note where vals goes in the environment.

## tools -- 2 choices  base R, and stringr package

## BaseR -- Piping??


g1 <- sub(",", "", vals)
vals[1:20]
g1[1:20]


g2 <- gsub(",", "", vals)
vals[1:20]
g2[1:20]


## stringr - str_replace(), str_replace_all()

## LOOK -- see ref for stingr pkg
a <- vals |> str_detect(",")

vals[1:20]
a[1:20]

## Still strings!!

b <- vals |> str_replace(",", "")
vals[1:20]
b[1:20]

c <- vals |> str_replace_all(",", "")
vals[1:20]
c[1:20]

## Now notice what happens when the
## the strings of digits are cast to numerics.

## for example
c <- as.numeric(c)
c[1:20]


### remove commas from Value entries
dcomma <- function(c){
  x_new <- as.numeric(gsub(",", "", c))
  return(x_new)
}



#########################################  footnotes

## finds single uppor case Character in parens in s2
## e.g. "(D)"

## To fine the location and value of the footnotes

v <- strwb_census$Value


## find the footnote locations
## fn_i: locations 
fn_i <- v |> str_detect("^\\([:upper:]\\)$") ## returns


## dcomma returns numbers and NA's
v1 <- dcomma(v)

## locations of NA's
na_i <- is.na(v1)

## Demonstration that the locations of the footnotes
## are the same as the locations of the NA's

length(v) == sum(na_i == fn_i)

## update dcomma()
## Integrate transformation of the values column and 
## reporting the footnote values.


dcomma <- function(c){
  xnew = as.numeric(gsub(",", "", c))
  fns = unique(c[is.na(xnew)])
  vtran = list("new_vec" = xnew, "footnotes" = fns)
  return(vtran)
}

 
v_trns <- dcomma(v)
 

 a <- v_trns$new_vec
 a[1:20]
 
 v_trns$footnotes
 

```







## plots  

```{r}
#| label: plot 1
#| echo: false
#| eval: false

plot1_data <- strawberry |> 
  select(c(Year, State, Category, Value)) |> 
  filter((Year == 2021) & (Category == "ORGANIC - OPERATIONS WITH SALES"))

plot1_data$Value <- as.numeric(plot1_data$Value)

plot1_data <- plot1_data |> arrange(desc(Value))

ggplot(plot1_data, aes(x=reorder(State, -Value), y=Value)) + 
  geom_bar(stat = "identity") + 
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  labs(x = "States", y = "Count",
title ="Number of Organic Strawberry operations with Sales in 2021")


```

```{r}
#| label: plot 2
#| echo: false
#| eval: false


##
plot2_data <- strawberry |> 
  select(c(Year, State, Category, Item, Value)) |> 
  filter((Year == 2021) & 
           (Category == "ORGANIC - SALES") & 
           (Item == "MEASURED IN $") & 
           (Value != "(D)"))


plot2_data$Value <- as.numeric(gsub(",", "", plot2_data$Value))

plot2_data <- plot1_data |> arrange(desc(Value))

ggplot(plot2_data, aes(x=reorder(State, -Value), y=Value)) + 
  geom_bar(stat = "identity") + 
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  labs(x = "States", y = "Sales",
title ="Organic Strawberry Sales ($) in 2021")


```

## chemicals
```{r}


```

### carcinogens from WHO list



#### updated

[list from WHO?](https://ggle.io/6Eys)

Arsenic: A Group 1 carcinogen, or conclusive cause of cancer  
Ethylene oxide: A Group 1 carcinogen  
Lindane: A Group 1 carcinogen  
2,3,7,8-tetrachlorodibenzo-p-dioxin (TCDD): A Group 1 carcinogen  
Diazinon: Classified as "probably carcinogenic"  
Glyphosate: Classified as "probably carcinogenic"   
Malathion: Classified as "probably carcinogenic"  




####

Now produce two data frames using strwb_survey.
One will have market data similar to strwb_census
The second will have data about chemicals used by 
strawberry growers.

Use the survey market data to enrich the data you already have
from the census.  

Use the chemical data to explore the use of carcinogens to grown strawberries.  Use the World Health Organization's
list of carcinogens.  These lists site specific chemicals. 
For exampe: these chemicals are on WHO's list of known carcinogens: captafol, ethylene dibromide, glyphosate, malathion, diazinon and dichlorophenyltrichloroethane (DDT).   Note that the WHO lists are not specific to strawberries.  You must use available data resources to determine which are used in strawberry growing.

## Clean and organize strwb_survey

```{r}
#| label: strwb_survey preliminary exploration
#| echo: false
#| eval: true

# glimpse(strwb_survey)

## find strwb_survey columns that should be split into columns
## 

## this section will produce tables listing
## the variables in the columns of strwb_survey
## remove the table your won't use

# distinct(strwb_survey[,3]) |> kable()
# c4 <- distinct(strwb_survey[,4])
# 
# c6 <- distinct(strwb_survey[,6])
# c7 <- distinct(strwb_survey[,7])
c8 <- distinct(strwb_survey[,8])

# c3 |> kable()
# c4 |> kable()
# 
# c6 |> kable()
# c7 |> kable()
c8 |> kable()





```


## Column analyses

### Period

```{r}
#| label: period column 
#| echo: false

per_c <- strwb_survey |> select(Period) |> distinct()
per_c <- unlist(per_c)

# 
# ## Split domain into two columns "type" and "subtype"
#   strwb_survey <- strwb_survey |>
#   separate_wider_delim(  cols = Period,
#                          delim = ",",
#                          names = c("type",
#                                  "subtype"),
#                          too_many = "error",
#                          too_few = "align_start"
#                        )
#          
# ## check the result
#  


```

data item

```{r}
#| label: data item analysis
#| echo: false


## columns need descriptive names

strwb_survey <- strwb_survey |> 
  separate_wider_delim(  cols = `Data Item`,
                         delim = ",",
                         names = c("temp1",
                                 "Marketing vs Production",
                                 "Measurement Unit",
                                 "Aggregate type"),
                         too_many = "error",
                         too_few = "align_start"
                       )

strwb_survey <- strwb_survey |>
  separate_wider_delim(  cols = temp1,
                         delim = " - ",
                         names = c("Fruit",
                                 "Price or Weight?"),
                         too_many = "error",
                         too_few = "align_start"
                       )



```

Domain


```{r}
#| label: domain
#| echo: false
#| eval: true

#strwb_survey <- strwb_survey |>
#  separate_wider_delim(  cols = Domain,
  #                       delim = ",",
  #                       names = c("temp22",
  #                               "temp23"),
  #                       too_many = "error",
  #                       too_few = "align_start"
  #                     )


#t22 <- unique(strwb_survey$temp22)

#t23 <- unique(strwb_survey$temp23)


```

Domain Category

```{r}
#| label: Domain Category
#| echo: false
#| eval: true


#strwb_survey <- strwb_survey |>
# separate_wider_delim(  cols = `Domain Category`,
#                         delim = ",",
#                         names = c("temp42",
#                                 "temp43",
#                                 "temp44",
#                                 "temp45"),
#                         too_many = "error",
#                         too_few = "align_start"
#                       )

#Getting the Chemical Type and putting it into its own column
strwb_survey_chem1 <- strwb_survey |> mutate(`Chemical Type` = 
                                               str_sub(Domain,str_locate(Domain,"CHEMICAL,")[,2]+1,),
                                             .after= `Domain Category`)

#Extracting Chemical Name into a column
strwb_survey_chem1<- strwb_survey_chem1 |> mutate(`Chemical Name`=
                                                    str_sub(`Domain Category`,
                                                    str_locate(`Domain Category`,":")[,2]+3,
                                                    str_locate(`Domain Category`,"=")[,1]-2),
                                                  .after = `Chemical Type`)
#Extracting Chemical ID into a column
strwb_survey_chem1<- strwb_survey_chem1 |> mutate(`Chemical ID`=
                                                    str_sub(`Domain Category`,-7), .after= `Chemical Name`)
strwb_survey_chem1$`Chemical ID`<- str_sub(strwb_survey_chem1$`Chemical ID`,1,-2)
strwb_survey_chem1$`Chemical ID`<- ifelse(strwb_survey_chem1$Domain=="TOTAL",NA,strwb_survey_chem1$`Chemical ID`)
strwb_survey_chem1$`Chemical ID`<- ifelse(str_detect(strwb_survey_chem1$`Domain Category`,"TOTAL")==TRUE,NA,strwb_survey_chem1$`Chemical ID`)
strwb_survey_chem1$`Chemical ID`<- str_replace(strwb_survey_chem1$`Chemical ID`,"=","")
strwb_survey_chem1$`Chemical ID`<- str_trim(strwb_survey_chem1$`Chemical ID`, side = 'both')

strwb_survey_chem <- strwb_survey_chem1 |> select(-c(Domain,`Domain Category`))


```

Now that we have a data frame with chemical information on the strawberries, let's organize the list of epa chemicals so we can parse and add toxicity information:

```{r}
chemical_list<- strwb_survey_chem |> filter(is.na(`Chemical Name`)!=TRUE) |>
                distinct(`Chemical Name`,.keep_all = TRUE)|> 
                select(`Chemical Name`,`Chemical ID`)

CAS_no<- c("131860-33-8","","","","","","1219521-95-5","1303-96-4","188425-85-6",
           "","133-06-2","20543-04-8","180409-60-3","121552-61-2","119446-68-3",
           "126833-17-8","131341-86-1","658066-35-4","907204-31-3","39148-24-8",
           "875915-78-9","70630-17-0","13492-26-7","88671-89-0","183675-82-3",
           "146659-78-1","	298-14-6","60207-90-1","	175013-18-0","53112-28-0",
           "878790-59-1","","7704-34-9","112281-77-3","23564-05-8","137-26-8",
           "141517-21-7","68694-11-1","128639-02-1","103361-09-7","38641-94-0",
           "70901-12-1","15299-99-7","42874-03-3","1910-42-5","	40487-42-1",
           "71751-41-2","57960-19-7","135410-20-7","108168-76-9","63428-82-0",
           "149877-41-8","82657-04-3","68038-71-1","68038-71-1","68038-71-1",
           "68038-71-1","68038-71-1","69327-76-0","","120962-03-0","500008-45-7",
           "","736994-63-1","400882-07-7","333-41-5","153233-91-1","13356-08-6",
           "39515-41-8","134098-61-6","158062-67-0","951659-40-8","","78587-05-0",
           "138261-41-3","121-75-5","161050-58-4","300-76-5","8002-65-1","947173-77-5",
           "116714-46-6","64742-89-8","51-03-6","67701-09-1","8003-34-7","96489-71-3",
           "95737-68-1","935545-74-7","131929-60-7","283594-90-1","153719-23-4",
           "135158-54-2","334-48-5","124-07-2","8023-77-6","76-06-2","542-75-6",
           "76674-21-0","8000-78-0","7722-84-1","10045-86-0","137-41-7","8012-95-1",
           "","79-21-0","1312-76-1","","","1228284-64-7","99129-21-2","14215-52-2",
           "87674-68-8","81406-37-3","100784-20-1","145701-23-1","63-25-2","120928-09-8",
           "946578-00-3","525-79-1","16672-87-0","133-32-4","","20427-59-2","67892-31-3",
           "77182-82-2","	122836-35-5","2921-88-2","8001-22-7","1315501-18-8","","",
           "68038-71-1","","108-62-3","137-42-8","","1332-65-6","2439-10-3","66332-96-5",
           "2008-39-1","32341-80-3","52315-07-8","68424-85-1","32426-11-2","5538-94-3",
           "7173-51-5","36734-19-7","155569-91-8","91465-08-6","203313-25-1","57-06-7",
           "624-92-0","1317-39-1","63718-65-0","272451-65-7","74-83-9","1897-45-6",
           "120116-88-3","8018-01-7","115-29-7","404-86-4","",	"57754-85-5","122-34-9",
           "5902-51-2","15708-41-5","81777-89-1")

chemical_list$CAS_no<- CAS_no

library(readxl)
hazards <- read_excel("UN data.xlsx")

```


## references

for EPA number lookup [epa numbers](https://archive.epa.gov/pesticides/chemicalsearch/chemical/foia/web/html/128810.html)

[Active Pesticide Product Registration Informational Listing](https://ordspub.epa.gov/ords/pesticides/f?p=APPRIL_PUBLIC:2::::::)


pc number input
[pesticide chemical search](https://ordspub.epa.gov/ords/pesticides/f?p=chemicalsearch:1)

[toxic chemical dashboard](https://comptox.epa.gov/dashboard/)

[ACToR â Aggregated Computational Toxicology Resource](https://cfpub.epa.gov/si/si_public_record_report.cfm?Lab=NCCT&dirEntryId=209598)

[comptox dashboard](https://comptox.epa.gov/dashboard/chemical/details/DTXSID0020315)

[pubChem](https://pubchem.ncbi.nlm.nih.gov/)

The EPA PC (Pesticide Chemical) Code is a unique chemical code number assigned by the EPA to a particular pesticide active ingredient, inert ingredient or mixture of active ingredients.

## Investigating toxic pesticides

[start here with chem PC code](https://ordspub.epa.gov/ords/pesticides/f?p=chemicalsearch:1)

[step 2](https://ordspub.epa.gov/ords/pesticides/f?p=113:1::::RP,17,1::) to get label (with warnings) for products using the chemical

[International Chemical safety cards](https://www.ilo.org/dyn/icsc/showcard.home)




[Pesticide Product and Label System](https://ordspub.epa.gov/ords/pesticides/f?p=113:1::::RP,17,1::)

[Search by Chemical](https://ordspub.epa.gov/ords/pesticides/f?p=113:17::::::)

[CompTox Chemicals Dashboard](https://comptox.epa.gov/dashboard/)

[Active Pesticide Product Registration Informational Listing](https://ordspub.epa.gov/ords/pesticides/f?p=APPRIL_PUBLIC:2::::::)

[OSHA chemical database](https://www.osha.gov/chemicaldata)

[Pesticide Ingredients](http://npic.orst.edu/ingred/)

[NPIC Product Research Online (NPRO)](http://npic.orst.edu/NPRO/)

[Databases for Chemical Information](http://npic.orst.edu/ingred/cheminfo.html)

[Pesticide Active Ingredients](http://npic.orst.edu/ingred/active.html)

[TSCA Chemical Substance Inventory](https://www.epa.gov/tsca-inventory)

[glyphosate](https://ordspub.epa.gov/ords/pesticides/f?p=CHEMICALSEARCH:3::::1,3,31,7,12,25:P3_XCHEMICAL_ID:2478)
