---
title: "Strawberries"
author: "Ajay Krishnakumar"
date: 2023 Oct 23
format: pdf
engine: knitr
---

## Introduction: The data, the motivations

When was the last time you looked at your strawberries - not just a cursory examination before you ate them, but really looked? At the labels, at the warnings and cautions and USDA certifications and the chemicals they spray on them? I had certainly never considered any of those factors until this assignment, until we were told that perhaps this was something to look into, until Haviland Wright painted for us the extent to which strawberries are not to be trusted.

-   What sort of chemicals are being used on strawberries?
-   How hazardous are these chemicals?
-   Where are these chemicals used most

Considering the consistent placing of Strawberries on the 'Dirty Dozen' list, these are but a few of the questions we should think about. As consumers we should be concerned about the extensive use of pesticide in daily foods. As human beings with our instinct for self-preservation, we should be concerned about the chemicals we are putting in our bodies. So what can the data tell us? How alarmed should we be? I'll try to answer that first question. The second is left as an exercise for the reader.

The data itself is from the USDA NASS database, cleaned through much effort by Haviland(though perhaps not one hundredth of the effort we should put into cleaning our strawberries if the results of this exercise are anything to go by). It is this data collected by survey instead of census and focusing on non organic strawberries that serves as the jumping off point for what follows.

## Data Cleaning and Organization

The first order of business is to split the data that remains from the earlier cleaning into market data and chemical data. This is done thus:

```{r}
#Loading the libraries we shall need
library(knitr)
library(tidyverse)
library(stringr)
library(ggplot2)

strwb_survey<- read.csv("strwb_survey.csv", header = TRUE)

#Extracting the data relevant to chemicals using the Pesticide or Market Column

strwb_survey_c<- strwb_survey |> filter(Pesticide_or_Market == " BEARING - APPLICATIONS")
strwb_mkt<- strwb_survey |> filter(Pesticide_or_Market != " BEARING - APPLICATIONS")
```

#### Cleaning Market Data

Let us consider first, the market data. A view statement shows us what it looks like and what needs to be done to clean it. I won't print that View statement here but suffice it to say there are changes that can be made here to clean the data. First the column I have named Price or Weight. It transpires that this is hardly an appropriate name.

```{r}
strwb_mkt |> distinct(Price_or_Weight.)

strwb_mkt <- strwb_mkt |> rename(PriceProduction = Price_or_Weight.)
```

We can see that this column takes three distinct values: "PRICE RECEIVED", NA and "PRODUCTION". I have renamed this column more sensibly above. While I have called it PriceProduction, it is important to note that the NA values aren't just dead space in every case. In the case of the chemical subset of the data, this should rightly be NA. But this dataset doesn't have the chemicals data. So what about the NAs here?

A quick examination tells us that Price or Production can be interpolated from one of the next two columns.

What about the name of the Pesticide or Market column? This seemed fitting when I used the column to split chemical and market data. We can check distinct Domain Categories to confirm that this is a valid way to split the data. But having been split, what information does this column now convey?

The code below deals with both these issues.

```{r}

#Getting Price or Production values
strwb_mkt$PriceProduction<-ifelse(is.na(strwb_mkt$PriceProduction)==FALSE,
                                   strwb_mkt$PriceProduction,
  ifelse(str_detect(strwb_mkt$Pesticide_or_Market,"PRODUCTION")==TRUE |
    str_detect(strwb_mkt$Measurement_Unit,"PRODUCTION")==TRUE,"PRODUCTION",
  ifelse(str_detect(strwb_mkt$Pesticide_or_Market,"PRICE RECEIVED")==TRUE |       str_detect(strwb_mkt$Measurement_Unit,"PRICE RECEIVED")==TRUE,
         "PRICE RECEIVED",strwb_mkt$PriceProduction)))

#Changing the name of Pesticide or Market

strwb_mkt<- strwb_mkt |> rename(
                                Purpose = Pesticide_or_Market
)

```

But now we see the Purpose column doesn't always have purpose. Sometimes it contains what is very clearly the Measurement Unit, while the Measurement Unit itself is NA. Let's fix this too.

```{r}
strwb_mkt$Measurement_Unit<- ifelse(is.na(strwb_mkt$Measurement_Unit),
                                    strwb_mkt$Purpose,strwb_mkt$Measurement_Unit)
strwb_mkt$Purpose<- str_replace(strwb_mkt$Purpose,"- PRICE RECEIVED","")
strwb_mkt$Purpose<- str_replace(strwb_mkt$Purpose,"- PRODUCTION","")

strwb_mkt$Purpose<- ifelse(str_detect(strwb_mkt$Purpose,"MEASURED")==TRUE, "AGGREGATE",
                           strwb_mkt$Purpose)

strwb_mkt$Aggregate_type<- ifelse(strwb_mkt$Purpose == "Aggregate", 
                                  strwb_mkt$Measurement_Unit,
                                  strwb_mkt$Aggregate_type)
```

Measurement Unit doesn't seem to always represent measurement unit and in fact probably contains aggregate type instead - for example where it says "Production Utilization".  Let's fix that:

```{r}

a<- strwb_mkt$Measurement_Unit[which(str_detect(strwb_mkt$Measurement_Unit,"MEASURED")==FALSE)]
b<- strwb_mkt$Aggregate_type[which(str_detect(strwb_mkt$Measurement_Unit,"MEASURED")==FALSE)]

strwb_mkt$Aggregate_type[which(str_detect(strwb_mkt$Measurement_Unit,"MEASURED")==FALSE)]<- a
strwb_mkt$Measurement_Unit[which(str_detect(strwb_mkt$Measurement_Unit,"MEASURED")==FALSE)]<- b

#Casting all non numeric values as NA
strwb_mkt$Value<- suppressWarnings(as.numeric(strwb_mkt$Value))
```

That's the market data cleaned.

#### Chemical Data

We start by extracting all the chemical information we can from the data we have. This is stored in the Domain and Domain Category columns.

```{r}
#Getting the Chemical Type and putting it into its own column
strwb_survey_chem1 <- strwb_survey_c |> mutate(`Chemical Type` = 
                                               str_sub(Domain,str_locate(Domain,"CHEMICAL,")[,2]+1,),
                                             .after= Domain.Category)

#Extracting Chemical Name into a column
strwb_survey_chem1<- strwb_survey_chem1 |> mutate(`Chemical Name`=
                                                    str_sub(Domain.Category,
                                                    str_locate(Domain.Category,":")[,2]+3,
                                                    str_locate(Domain.Category,"=")[,1]-2),
                                                  .after = `Chemical Type`)
#Extracting Chemical ID into a column
strwb_survey_chem1<- strwb_survey_chem1 |> mutate(`Chemical ID`=
                                                    str_sub(Domain.Category,-7), .after= `Chemical Name`)
strwb_survey_chem1$`Chemical ID`<- str_sub(strwb_survey_chem1$`Chemical ID`,1,-2)
strwb_survey_chem1$`Chemical ID`<- ifelse(strwb_survey_chem1$Domain=="TOTAL",NA,strwb_survey_chem1$`Chemical ID`)
strwb_survey_chem1$`Chemical ID`<- ifelse(str_detect(strwb_survey_chem1$Domain.Category,"TOTAL")==TRUE,NA,strwb_survey_chem1$`Chemical ID`)
strwb_survey_chem1$`Chemical ID`<- str_replace(strwb_survey_chem1$`Chemical ID`,"=","")
strwb_survey_chem1$`Chemical ID`<- str_trim(strwb_survey_chem1$`Chemical ID`, side = 'both')

strwb_survey_chem<- strwb_survey_chem1
```

Now we will use the PC codes we've extracted and placed in Chemical ID and use the
